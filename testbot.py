import telebot
import re
import requests
import baza
import conf as config
from conf import offensive_messages, love_messages
from datetime import datetime

bot = telebot.TeleBot(config.token)


# –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ '/start' –ø—Ä–∏–≤—ñ—Ç–∞—î–º–æ—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
@bot.message_handler(commands=['start'])
def handle_start_help(message):
    if (baza.get_data(str(message.chat.id) + 'name')):
        bot.send_message(message.chat.id, f" –ü—Ä–∏–≤—ñ—Ç, {baza.get_data(str(message.chat.id) + 'name')},"
                                          f"\n–Ø–∫—â–æ —Ç–∏ –Ω–µ –∑–Ω–∞—î—à —â–æ –¥–∞–ª—ñ, –ø–∏—à–∏ /help!")
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEBUO9gphfpZQlB3jFnUPHwirSSQz-0JwACHwADnP4yMCBW8jz3ttrRHwQ')
    else:
        bot.send_message(message.chat.id, "   –ü—Ä–∏–≤—ñ—Ç!"
                                          "\n–Ø, –±–æ—Ç, —è–∫–∏–π –ª—é–±–∏—Ç—å —Å–æ–±–∞–∫ü§´, –∫–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–¥–∞?"
                                          "\n–Ø –º–æ–∂—É –±–∞–≥–∞—Ç–æ —á–æ–≥–æ, —Ç–æ–∂,"
                                          "\n–Ø–∫ —è –º–æ–∂—É –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å? ")
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEBUO9gphfpZQlB3jFnUPHwirSSQz-0JwACHwADnP4yMCBW8jz3ttrRHwQ')
        baza.set_data(message.chat.id, config.States.S_ENTER_NAME.value)


# –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ '/set_name' –∑–º—ñ–Ω–∏–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
@bot.message_handler(commands=['set_name'])
def set_name(message):
    bot.send_message(message.chat.id, "–¢–æ–∂, —è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    baza.set_data(message.chat.id, config.States.S_ENTER_NAME.value)


# –ó–∞–ø–∏—Å—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(func=lambda message: baza.get_data(message.chat.id) == config.States.S_ENTER_NAME.value)
def user_entering_name(message):
    # –í –≤–∏–ø–∞–¥–∫—É –∑ —ñ–º–µ–Ω–µ–º –Ω–µ –±—É–¥–µ–º–æ –Ω—ñ—á–æ–≥–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏
    bot.send_message(message.chat.id, "–ß—É–¥–æ–≤–µ —ñ–º'—è, –∑–∞–ø–∞–º'—è—Ç–∞—é!")
    bot.send_message(message.chat.id, f"–©–æ –∂ –¥–∞–ª—ñ? –ü–∏—à–∏: /help")
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEBUPVgphgbJwqWZHpnNSbooLkUw-Uq0QACEgADnP4yMOA1S0Oue2vUHwQ')
    baza.set_data(str(message.chat.id) + 'name', message.text)
    baza.set_data(message.chat.id, config.States.S_START.value)


# –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ '/help' –≤–∏–≤–µ–¥–µ–º–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º.
@bot.message_handler(commands=['help'])
def handle_start_help(message):
    bot.send_message(message.chat.id, 'Command list: '
                                      '\n/help, '
                                      '\n/start, '
                                      '\n/price'
                                      '\n/set_name, '
                                      '\n/random_dog'
                                      '\n/random_stats_dog')


# –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –æ–±—Ä–∞–∑–ª–∏–≤–∏—Ö —Å–ª—ñ–≤ —Å–∞–º–µ –¥–æ –±–æ—Ç–∞ –∑ –º–∞—Å–∏–≤—É 'offensive_messages' –∑ 'config'
# –±—É–¥–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –¥–æ –Ω—å–æ–≥–æ
@bot.message_handler(func=lambda message: message.text \
                                          and re.sub(r'\s+', ' ', message.text.lower()) \
                                          in map(lambda x: x, offensive_messages))
def offensive_message(message):
    words = re.sub(r'\s+', ' ', message.text.lower()).split()
    bot.reply_to(message, f"–°–∞–º {words[0]}")
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEBUPtgphnA3-a9qSU6w7FqpUXVtx00cAACGwADnP4yMByL0TjtFNWIHwQ')


# –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø—Ä–∏—ç–º–Ω–∏—Ö —Å–ª—ñ–≤ —Å–∞–º–µ –¥–æ –±–æ—Ç–∞ –∑ –º–∞—Å–∏–≤—É 'love_messages' –∑ 'config'
# –±—É–¥–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –¥–æ –Ω—å–æ–≥–æ
@bot.message_handler(func=lambda message: message.text \
                                          and re.sub(r'\s+', ' ', message.text.lower()) \
                                          in map(lambda x: x, love_messages))
def love_message(message):
    words = re.sub(r'\s+', ' ', message.text.lower()).split()
    bot.send_message(message.chat.id, 'WOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOW ')
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEBUQpgphth27f3rL6LkuwQmdhF6CtDDAACGQADnP4yMGtnBiuSyxWjHwQ')


# –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ '/random_dog' –≤–∏–≤–µ–¥–µ–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Ñ–æ—Ç–æ —á–∏ –≤—ñ–¥–µ–æ —Å–æ–±–∞–∫–∏.
@bot.message_handler(commands=['random_dog'])
def random_dog(message):
    try:
        r = requests.get(url=config.random_dog_api)
        response = r.json()
    except:
        bot.send_message(message.chat.id, '–ù–∞–∂–∞–ª—å –Ω–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üòî')
        return

    extension = response["url"].split('.')[-1]
    # –Ø–∫—â–æ –≤—ñ–¥–µ–æ
    if ('mp4' in extension):
        bot.send_video(message.chat.id, response["url"])
    # gif
    elif ('gif' in extension):
        bot.send_video_note(message.chat.id, response["url"])
    # –§–æ—Ç–æ
    else:
        bot.send_photo(message.chat.id, response["url"])


# –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ '/random_stats_dog' –≤–∏–≤–µ–¥–µ–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Ñ–æ—Ç–æ —á–∏ –≤—ñ–¥–µ–æ —Å–æ–±–∞–∫–∏.
@bot.message_handler(commands=['random_stats_dog'])
def random_stats_dog_help(message):
    bot.send_message(message.chat.id, 'ü§ó –¶–µ –º–æ—è –æ—Å–Ω–æ–≤–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å'
                                      '\nü§´ –Ø –∑–Ω–∞—é –≤—Å–µ –ø—Ä–æ —Å–æ–±–∞–∫'
                                      '\n‚ùî –•–æ—á–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏? '
                                      '\n‚úî –¢–∏ –º–æ–∂–µ—à —Å–∫–∞–∑–∞—Ç–∏ "name", —ñ —è —Ç–æ–±—ñ –Ω–∞–∑–≤—É —Ä–∞–Ω–¥–æ–º–Ω–µ —ñ–º`—è '
                                      '\n‚úî –Ø —Å–∫–∞–∂—É –ø–æ—Ä–æ–¥—É —Ç–∞ –≤—ñ–∫ —Å–æ–±–∞–∫–∏, –π–æ–≥–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ,–ø–∏—à–∏"breed"'
                                      '\n‚úî –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç —ñ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è - –ø–∏—à–∏ "temp"')
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEBUPhgphiW3lLddusR1Qn2oRCodDHELQACEAADnP4yMIzJFdBdAnGcHwQ')

@bot.message_handler(commands=['price'])
def random_stats_dog_help(message):
    bot.send_message(message.chat.id, 'ü§ó –¢–∏ –∑–Ω–∞–≤, —â–æ –≤ —á–µ—Å—Ç—å —Å–æ–±–∞–∫–∏ –Ω–∞–∑–≤–∞–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É?'
                                      '\nü§´ –Ø –∑–Ω–∞—é –ø—Ä–æ –Ω–µ—ó –≤—Å–µ'
                                      '\n‚ùî –•–æ—á–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏? '
                                      '\n‚úî –ù–∞–ø–∏—à–∏ "show me a doge crupto price" ')
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEBUVZgpnrGmreMkOzg1hSL37ot8hNZUgACIwADnP4yMGLSFbgqnabRHwQ')


@bot.message_handler(content_types=["text"])
def random_stats(message):
    if message.text.lower() == "show me a doge crupto price":
        req = requests.get("https://yobit.net/api/2/doge_usd/ticker")
        response = req.json()
        high_price = response["ticker"]["high"]
        sell_price = response["ticker"]["sell"]
        buy_price = response["ticker"]["buy"]
        bot.send_message( message.chat.id,f"‚è∫ Now: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                                          f"\n\n\n‚¨ÜÔ∏è High DOGE price: {high_price,}"
                                          f"\n\n‚û°Ô∏è Sell DOGE price: {sell_price},"
                                          f"\n\n‚¨ÖÔ∏è Buy DOGE price: {buy_price}"
                         )

    if message.text.lower() == "name":
        response = requests.get(url=config.random_stats_api)
        response.headers.get("Content-Type")
        'application/json; charset=utf-8'
        category_name = response.json()['name']
        bot.send_message(message.chat.id,
                         f"Name: {category_name}"
                         )

    if message.text.lower() == "breed":
        req = requests.get(url=config.random_stats_api_1)
        req.headers.get("Content-Type")
        'application/json; charset=utf-8'
        breedgroup = req.json()["breed_group"]
        life = req.json()["life_span"]
        bred = req.json()['bred_for']
        bot.send_message(message.chat.id, f"Breed:  {breedgroup},"
                                          f"\nLife span:  {life},"
                                          f"\nBred for:  {bred}"
                         )

    if message.text.lower() == "temp":
        requ = requests.get(url=config.random_stats_api)
        requ.headers.get("Content-Type")
        'application/json; charset=utf-8'
        temperament = requ.json()['temperament']
        origin = requ.json()['origin']
        bot.send_message(message.chat.id, f"Temperament: {temperament}"
                                          f"\nOrigin: {origin}"
                         )

bot.polling()

if __name__ == '__testbot__':
    bot.polling()